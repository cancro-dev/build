#!/usr/bin/env python
#
# Copyright (C) 2016 The EFIDroid Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# common imports
import os.path
import sys
import glob
import os
import subprocess
import os
import re
from sys import stdin

sys.path.append(os.path.join(os.path.dirname(__file__), '../core'))
from utils import *

# compatibility imports
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

try:
    import ConfigParser
except ImportError:
    import configparser as ConfigParser

def inputex(msg):
    return input(bldylw+msg+txtrst)

def main(argv):
    SCRIPTDIR = os.path.dirname(os.path.realpath(__file__))

    # check arguments
    if not len(argv) == 1:
        raise Exception('Invalid number of arguments')

    # get devicedir
    devicedir = argv[0]
    if not os.path.isdir(devicedir):
        raise Exception('Can\'t find '+devicedir)

    # create configparser
    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.optionxform = str
    config.read(devicedir+'/config.ini')

    # parse bootimages
    p = subprocess.Popen(['fastboot', 'oem', 'findbootimages'], stderr=subprocess.PIPE)
    lines = p.stderr.read().splitlines()

    count = -1
    found_lk_base = False
    found_edk2_base = False
    for line in lines:
        count+=1
        linedec = line.decode()

        if linedec.startswith('(bootloader) \tID:5(appsbl)'):
            cols = lines[count+1].split()
            dst = int(cols[3].decode().split(':')[1], 16)

            pr_notice('updating LK_BASE to 0x%016x' % (dst))
            config.set('variables', 'LK_BASE', '0x%016x'%dst)
            found_lk_base = True
            break

        if linedec.startswith('(bootloader) found ELF') and linedec.endswith('on aboot'):
            cols = lines[count+1].split()
            print(cols)
            dst = int(cols[2].decode(), 16)

            pr_notice('updating LK_BASE to 0x%016x' % (dst))
            config.set('variables', 'LK_BASE', '0x%016x'%dst)
            found_lk_base = True
            break

    # parse ram-ptable
    p = subprocess.Popen([SCRIPTDIR+'/fastbootwrapper', 'oem', 'ram-ptable'], stdout=subprocess.PIPE)
    lines = p.stdout.read().splitlines()

    count = -1
    highestaddr = -1
    for line in lines:
        count+=1
        if count <= 1:
            continue

        cols = line.decode().split('\t')
        if len(cols) != 8:
            continue

        ptype = cols[-2]
        pcat = cols[-4]
        prange = cols[1].split('-')
        prange[0] = int(prange[0], 16)
        prange[1] = int(prange[1], 16)
        if not prange[0]==0 and prange[1]==0:
            prange[1] = 0xffffffff + 1

        if pcat=='sdram' or pcat=='ebi1':
            if prange[1]>highestaddr:
                highestaddr = prange[1]

        if ptype=='appsbl' and not found_lk_base:
            pr_notice('updating LK_BASE to 0x%016x' % (prange[0]))
            config.set('variables', 'LK_BASE', '0x%016x'%prange[0])
            found_lk_base = True

    if not highestaddr == -1:
        edk2size = 32*1024*1024
        edk2base = highestaddr - edk2size
        pr_notice('updating EDK2_BASE to 0x%016x (size=0x%016x)' % (edk2base, edk2size))
        config.set('variables', 'EDK2_BASE', '0x%016x'%edk2base);
        config.set('variables', 'DRAM_SIZE', '0x%016x'%edk2size);
        found_edk2_base = True

    if not found_lk_base or not found_edk2_base:
        raise Exception('Couldn\'t find all the needed information')

    # write config
    with open(devicedir+'/config.ini', 'w') as configfile:
        config.write(configfile)
    
if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except:
        pr_error('Error: %s' % sys.exc_info()[1])
        raise
